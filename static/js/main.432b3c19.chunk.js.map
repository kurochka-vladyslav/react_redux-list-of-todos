{"version":3,"sources":["store/index.ts","api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["LOADING_TODOS","SELECT_USER","GET_ERROR","GET_USER","DELETE_TODO","actions","todos","type","userId","message","user","id","selectors","state","errorLoading","initialState","store","createStore","action","filter","todo","composeWithDevTools","API_URL","getData","url","a","fetch","responce","json","getUser","removeTodo","method","TodoList","useState","query","setQuery","appliedQuery","setAppliedQuery","statusOfTodo","setStatusOfTodo","useSelector","dispatch","useDispatch","preparedTodos","todosFilteredByTitle","title","toLowerCase","includes","completed","preparingTodos","selectUser","useCallback","deleteTodo","applyQuery","debounce","selectedUser","className","value","onChange","event","target","map","classNames","checked","readOnly","onClick","CurrentUser","error","useEffect","userFromServer","response","clear","name","email","phone","App","selectedUserId","getAllPosts","gotTodos","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.432b3c19.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// Action types - is just a constant. MUST have a unique value.\nconst LOADING_TODOS = 'LOADING_TODOS';\nconst SELECT_USER = 'SELECT_USER';\nconst GET_ERROR = 'GET_ERROR';\nconst GET_USER = 'GET_USER';\nconst DELETE_TODO = 'DELETE_TODO';\n\n// Action creators - a function returning an action object\nexport const actions = {\n  loading__todos: (todos: Todo[]) => ({\n    type: LOADING_TODOS,\n    todos,\n  }),\n  selectUser: (userId: number) => ({\n    type: SELECT_USER,\n    userId,\n  }),\n  getError: (message: string) => ({\n    type: GET_ERROR,\n    message,\n  }),\n  getUser: (user: User) => ({\n    type: GET_USER,\n    user,\n  }),\n  deleteTodo: (id: number) => ({\n    type: DELETE_TODO,\n    id,\n  }),\n};\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const selectors = {\n  loadTodos: (state: RootState) => state.todos,\n  getUserId: (state: RootState) => state.userId,\n  getError: (state: RootState) => state.errorLoading,\n  loadUser: (state: RootState) => state.user,\n};\n\n// Initial state\nexport type RootState = {\n  todos: Todo[];\n  userId: number;\n  errorLoading: string;\n  user: User | null,\n};\n\nconst initialState: RootState = {\n  todos: [],\n  userId: 0,\n  errorLoading: '',\n  user: null,\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case LOADING_TODOS:\n      return { ...state, todos: action.todos };\n\n    case SELECT_USER:\n      return {\n        ...state,\n        userId: action.userId,\n      };\n    case GET_ERROR:\n      return {\n        ...state,\n        message: action.message,\n      };\n    case GET_USER:\n      return {\n        ...state,\n        user: action.user,\n      };\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== action.id),\n      };\n\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","const API_URL = 'https://mate.academy/students-api';\n\nexport const getData = async (url: string) => {\n  const responce = await fetch(`${API_URL}/${url}`);\n\n  return responce.json();\n};\n\nexport const getTodos = (): Promise<Todo[]> => getData('todos');\n\nexport const getUser = (userId: number) => getData(`users/${userId}`);\n\nexport async function removeTodo(id: number) {\n  fetch(`${API_URL}/todos/${id}`, { method: 'DELETE' });\n}\n","import React, { ChangeEvent, useCallback, useState } from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport debounce from 'lodash/debounce';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { actions, selectors } from '../../store';\nimport { removeTodo } from '../../api';\n\nexport const TodoList: React.FC = () => {\n  const [query, setQuery] = useState('');\n  const [appliedQuery, setAppliedQuery] = useState('');\n  const [statusOfTodo, setStatusOfTodo] = useState('all');\n\n  const todos = useSelector(selectors.loadTodos);\n  const dispatch = useDispatch();\n\n  const preparingTodos = () => {\n    const todosFilteredByTitle = todos.filter(({ title }) => {\n      return title.toLowerCase().includes(appliedQuery.toLowerCase());\n    });\n\n    switch (statusOfTodo) {\n      case 'active':\n        return todosFilteredByTitle.filter(\n          ({ completed }) => !completed,\n        );\n\n      case 'completed':\n        return todosFilteredByTitle.filter(\n          ({ completed }) => completed,\n        );\n\n      default:\n        return todosFilteredByTitle;\n    }\n  };\n\n  const preparedTodos = preparingTodos();\n\n  const selectUser = useCallback((userId: number) => {\n    dispatch(actions.selectUser(userId));\n  }, []);\n\n  const deleteTodo = useCallback(async (id: number) => {\n    await removeTodo(id);\n\n    dispatch(actions.deleteTodo(id));\n  }, []);\n\n  const applyQuery = useCallback(\n    debounce(setAppliedQuery, 1000),\n    [],\n  );\n\n  const filterTitle = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setQuery(value);\n    applyQuery(value);\n  };\n\n  const selectedUser = useSelector(selectors.getUserId);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <div className=\"TodoList__input\">\n        <h3>Select todo title</h3>\n        <label>\n          <input\n            className=\"TodoList__input--title\"\n            type=\"text\"\n            value={query}\n            onChange={filterTitle}\n            data-cy=\"filterByTitle\"\n          />\n        </label>\n      </div>\n      <div className=\"TodoList__select\">\n        <h3>\n          Select todo status:\n        </h3>\n        <select\n          value={statusOfTodo}\n          onChange={event => setStatusOfTodo(event.target.value)}\n          className=\"TodoList__select--selector\"\n        >\n          <option>all</option>\n          <option>active</option>\n          <option>completed</option>\n        </select>\n      </div>\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\" data-cy=\"listOfTodos\">\n          {preparedTodos.map(todo => (\n            <li\n              className={classNames(\n                'TodoList__item',\n                { 'TodoList__item--checked': todo.completed },\n                { 'TodoList__item--unchecked': !todo.completed },\n              )}\n              key={todo.id}\n            >\n              <label>\n                <input type=\"checkbox\" checked={todo.completed} readOnly />\n                <p>{todo.title}</p>\n              </label>\n              {todo.userId && (\n                <div className=\"buttons\">\n                  <button\n                    className={classNames(\n                      'button',\n                      'TodoList__user-button',\n                      {\n                        'TodoList__user-button--selected':\n                          selectedUser === todo.userId,\n                      },\n                    )}\n                    type=\"button\"\n                    data-cy=\"userButton\"\n                    value={todo.userId}\n                    onClick={() => selectUser(todo.userId)}\n                  >\n                    {`User #${todo.userId}`}\n                  </button>\n\n                  <button\n                    type=\"button\"\n                    onClick={() => deleteTodo(todo.id)}\n                    className=\"button 'TodoList__user-button'\"\n                  >\n                    DELETE\n                  </button>\n                </div>\n              )}\n            </li>\n\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useCallback } from 'react';\nimport './CurrentUser.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUser } from '../../api';\nimport { selectors, actions } from '../../store';\n\nexport const CurrentUser: React.FC = () => {\n  const user = useSelector(selectors.loadUser);\n  const userId = useSelector(selectors.getUserId);\n  const error = useSelector(selectors.getError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    async function response() {\n      try {\n        const userFromServer = await getUser(userId);\n\n        dispatch(actions.getUser(userFromServer));\n      } catch {\n        dispatch(actions.getError(\"Can't load user\"));\n      }\n    }\n\n    response();\n  }, [userId]);\n\n  const clear = useCallback((value: number) => {\n    dispatch(actions.selectUser(value));\n  }, []);\n\n  return (\n    <>\n      {user ? (\n        <>\n          <div className=\"CurrentUser\">\n\n            <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${user.id}`}</span></h2>\n\n            <h3 className=\"CurrentUser__name\" data-cy=\"userName\">\n              {user.name}\n            </h3>\n            <p className=\"CurrentUser__email\">\n              {user.email}\n            </p>\n            <p className=\"CurrentUser__phone\">\n              {user.phone}\n            </p>\n          </div>\n\n          <button\n            type=\"button\"\n            className=\"CurrentUser__clear\"\n            onClick={() => clear(0)}\n          >\n            Clear User\n          </button>\n        </>\n      )\n        : (\n          <p>\n            {error}\n          </p>\n        )}\n    </>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useCallback, useEffect } from 'react';\nimport { actions, selectors } from './store';\n\nimport './App.scss';\n\nimport { TodoList } from './components/TodoList/TodoList';\nimport { getTodos } from './api';\nimport { CurrentUser } from './components/CurrentUser/CurrentUser';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const selectedUserId = useSelector(selectors.getUserId);\n\n  const getAllPosts = useCallback(async () => {\n    const gotTodos = await getTodos();\n\n    dispatch(actions.loading__todos(gotTodos));\n  }, []);\n\n  useEffect(() => {\n    getAllPosts();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser />\n          )\n            : (\n              'No user selected'\n            )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}